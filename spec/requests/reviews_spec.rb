# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/reviews', type: :request do
  # Review. As you add validations to Review, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { title: 'Lorem Ipsum', body: 'Lorem ipsum.', rating: 5 }
  end

  let(:invalid_attributes) do
    { title: 'Lorem Ipsum', body: 'Lorem ipsum.', rating: false }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Review.create! valid_attributes
      get reviews_url
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Review' do
        expect do
          post reviews_url, params: { review: valid_attributes }
        end.to change(Review, :count).by(1)
      end

      it 'redirects to the reviews page' do
        post reviews_url, params: { review: valid_attributes }
        expect(response).to redirect_to(reviews_url)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Review' do
        expect do
          post reviews_url, params: { review: invalid_attributes }
        end.to change(Review, :count).by(0)
      end

      it 'redirects to the reviews page' do
        post reviews_url, params: { review: invalid_attributes }
        expect(response).to redirect_to(reviews_url)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { title: 'Lorem Ipsum', body: 'Lorem ipsum.', rating: 4 }
      end

      let(:new_attributes_likes_only) do
        { likes: 3 }
      end

      it 'as product owner, updates requested review and rerenders' do
        user = FactoryBot.create :product_owner_user
        login_as(user)

        review = Review.create! valid_attributes
        patch review_url(review), params: { review: new_attributes }
        review.reload

        expect(review.rating).to eq 4
        expect(response).to redirect_to(reviews_url)
      end

      it 'as a guest, updating review with likes returns 200' do
        review = Review.create! valid_attributes
        patch review_url(review), params: { review: new_attributes_likes_only }
        review.reload

        expect(response).to be_successful
      end
    end
  end
end
